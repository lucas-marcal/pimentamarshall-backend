generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Address {
  id         String      @id
  address1   String
  number     Int
  complement String?
  bairro     String?
  city       String
  region     String
  userId     String?     @unique
  zipCode    String
  User       User?       @relation(fields: [userId], references: [id])
  ShopOrder  ShopOrder[]
}

model CartItem {
  id                String          @id
  shoppingSessionId String
  quantity          Int
  productId         String
  Product           Product         @relation(fields: [productId], references: [id])
  ShoppingSession   ShoppingSession @relation(fields: [shoppingSessionId], references: [id])
}

model OrderItem {
  id          String    @id
  shopOrderId String
  productId   String
  quantity    Int
  value       Float
  Product     Product   @relation(fields: [productId], references: [id])
  ShopOrder   ShopOrder @relation(fields: [shopOrderId], references: [id])
}

model Product {
  id          String      @id
  name        String
  image       String
  description String
  price       Float
  salePrice   Float?
  stock       Int
  isActive    Boolean
  picancia    Int?
  orderOnPage Int         @default(999)
  urlSlug     String      @unique
  CartItem    CartItem[]
  OrderItem   OrderItem[]
}

model Reseller {
  id              String  @id
  name            String
  storeType       String?
  address         String
  mapsLink        String
  instagram       String?
  instagramHandle String?
  orderOnPage     Int     @default(999)
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ShippingMethod {
  id        String      @id
  name      String
  price     Float
  ShopOrder ShopOrder[]
}

model ShopOrder {
  id               String         @id
  status           PaymentStatus
  totalValue       Float
  createdAt        DateTime       @default(now())
  updatedAt        DateTime
  addressId        String
  shippingMethodId String
  txid             String?
  clientLastName   String
  clientName       String
  hasLobby         Boolean
  paymentMethod    String
  deliveryTime     DateTime?
  clientEmail      String
  clientTel        String?
  OrderItem        OrderItem[]
  Address          Address        @relation(fields: [addressId], references: [id])
  ShippingMethod   ShippingMethod @relation(fields: [shippingMethodId], references: [id])
}

model ShoppingSession {
  id        String     @id
  userId    String     @unique
  total     Float      @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime
  CartItem  CartItem[]
  User      User       @relation(fields: [userId], references: [id])
}

model User {
  id              String           @id
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  Account         Account[]
  Address         Address?
  Session         Session[]
  ShoppingSession ShoppingSession?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum PaymentStatus {
  PENDING
  PROCESSING
  DELIVERED
}
